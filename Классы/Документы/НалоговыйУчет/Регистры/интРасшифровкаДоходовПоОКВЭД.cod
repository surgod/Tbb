class inherited МашинаРеквизитов.Базовые.интЗаписьСРеквизитом "Интерфейс: Tbb.НалоговыйУчет.Регистры.РасшифровкаДоходовПоОКВЭД";
import Первичка classes Нумератор;

inclass private
--  var ТекстПриУдалении             :String = 'Котировки за день';     -- заменить!!!
--  var ТекстПриВосстановлении       :String = 'Котировки за день';  -- заменить!!!
--  var ТекстИменительный            :String = 'котировки за день';     -- заменить!!!
--  var ТекстРодительный             :String = 'котировок за день';    -- заменить!!!
--  var ТекстПриГрупповойОперации    :String = 'котировки за день';    -- заменить!!!

inobject private
  -- Переменные для заполнения параметров нумерации по умолчанию...
  var Нумератор_Способы[]       :Integer = [снДокумент_Последовательно];
  var Нумератор_ПоляНумерации[] :String  = ["НомерБум"];
  var Нумератор_ПоляДаты[]      :String  = ["ДатаПроведения"];

inobject public

  Record :НалоговыйУчет.Регистры.РасшифровкаДоходовПоОКВЭД;

inclass public

  func СвязанныйКлассЗаписей :Class СИС2.Базовая.БазоваяЗапись;
    Result = Tbb.НалоговыйУчет.Регистры.РасшифровкаДоходовПоОКВЭД;
  end;

  func Create : Документы.НалоговыйУчет.Регистры.интРасшифровкаДоходовПоОКВЭД;
    Result        = inherited Create;
    Result.Record = Tbb.НалоговыйУчет.Регистры.РасшифровкаДоходовПоОКВЭД.Create;
  end;

  func ОткрытьПоЗаписи synonym OpenRecord(aRec: Tbb.НалоговыйУчет.Регистры.РасшифровкаДоходовПоОКВЭД): Документы.НалоговыйУчет.Регистры.интРасшифровкаДоходовПоОКВЭД;
    Result        = inherited Create;
    Result.Record = aRec;
  end;

  -- функция возвращает бланк-редактор записи по умолчанию
  func БланкРедакторПоУмолчанию :Class BlankForm;
    Result = Документы.НалоговыйУчет.Регистры.редРасшифровкаДоходовПоОКВЭД;
  end;

  -- функция возвращает картотеку записи по умолчанию
  func КартотекаПоУмолчанию :Class CardForm;
    Result = Документы.НалоговыйУчет.Регистры.картРасшифровкаДоходовПоОКВЭД;
  end;


inobject public

  proc Инициализировать synonym Init(
    аИмя        :String = '';
    аКод        :String = ''
  );
    Assert(Record.State = Kernel.Record.Created);
    with Record do
--      if (Имя = '') then
--        Имя = аИмя;
--      end;
--      if (Код = '') then
--        if (аКод <> '') then
--          Код = аКод;
--        else
--          ЗаполнитьКодПоИмени;
--        end;
--      end;
--      КодФилиала = ПолучитьКодФилиала;
--      УровеньКонфиденциальности = ПолучитьУровеньКонфидПоУмолчанию;
      Modified = False;
    end;
  end;

  proc ИнициализироватьПоУмолчанию synonym InitByDefault;
    Init(,);
  end;

end
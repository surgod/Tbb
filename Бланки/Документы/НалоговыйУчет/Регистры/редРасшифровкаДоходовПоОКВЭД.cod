class inherited НалогУчет.Документы.НалоговыйУчет.Регистры_Автозаполнение.редБазовыйРегистр "Расшифровка доходов по ОКВЭД", editor НалоговыйУчет.Регистры.РасшифровкаДоходовПоОКВЭД;
import СИС2 classes СтроковыеФункции, Календарь, ФункцииДокумента, Константы;

inobject private

--БанковскаяВыписка.НомерБум,
--БанковскаяВыписка.ДатаПроведения
var СуммаПоз: numeric[]; --

var r: Бухучет.Банки.Выписки;
--НалоговыйУчет.Регистры.РасшифровкаДоходовПоОКВЭД
--    struct Позиции array integer title "Список операций";
--      field БанковскаяВыписка :Бухучет.Банки.Выписки title "Банковская выписка";
--      field Контрагент        :Базовый.Данные.Субъект title "Контрагент";
--      field РеквП             :Базовый.Данные.Субъект title "Реквизиты контрагента";
--      field ПрихПлатПоручение :Первичка.Банки.ПрихПлПоручения title "Прих.платежное поручение";
--      field ПервДок           :Первичка.Банки.ПрихПлПоручения title "Первичный документ";
--      field КорСчет           :Базовый.Справочники.БанковскиеРеквизиты title "Банковские реквизиты";
--      field Банк              :Базовый.Справочники.БанковскиеРеквизиты title "Банковские реквизиты";
--      field ДатаДокумента     :date title "Дата первичного документа";
--      field НомерБум          :string title "Номер, первичного документа";
--      field НомВыпД           :string title "Номер строки в выписке банка";
--      field Т                 :string(350) title "Назначение платежа";
--      field Сумма             :real title "Сумма операции";
--      field ОКВЭД             :Классификаторы.ОКВЭД2 title "Признак ОКВЭД";
--      field КодОп             :string title "Корреспондирующий счет";
--   end;

--  struct ПозицииДеб array Integer;
--    field Проводить         :Logical                                 title "Формировать операцию по текущей позиции";
--    field НомВыпД           :String                                  title "Номер строки в выписке банка";
--
--    field ДатаДокумента     :Date                                    title "Дата платежного документа";
--    field НомерБум          :String                                  title "Номер, указанный в выписке банка";
--
--    field РеквП             :Базовый.Данные.Субъект                  title "Реквизиты контрагента";
--    field Сумма             :Numeric                                 title "Сумма платежа";
--    field КодОп             :String                                  title "Корреспондирующий счет";
--
--    field АвСчетФактура     :Первичка.УчетНДС.СчетаФактуры;
--    field КорСчет           :Базовый.Справочники.БанковскиеРеквизиты title "Банковские реквизиты";
--    field Т                 :String(350)                             title "Назначение платежа";
--
--    field ПрихПлатПоручение :Первичка.Банки.ПрихПлПоручения;
--
--    struct ДопПараметры array Integer;
--      field Название       :String;
--      field Значение       :inherited СИС2.Базовая.БазоваяЗапись;
--      field Расщепление    :Integer;
--    end;
--  end;

--{ вспомогательые методы
--@doc строковое представление даты в виде "__" ________ YY__  с макросами поля
func ДатаВСтрокуСМакро(locDate:Date): string;
  result = format('"<u+>%d<u->" <u+>%s<u-> %d<u+>%d<u->',
                  [day(locDate), Месяца(Mon(locDate)), div(year(locDate), 100), mod(year(locDate), 100)]);
end;

--@doc проверка входных параметров
func ПараметрыКорректны: logical;
  if Рекв = nil:
  elsif Период = nil:
   Message("Укажите отчетный период!");
   Self.Template.Field = "Период.ДатаНачала";
  else
    result = true;
  fi;
end;

--@doc заполнение бланка
proc Заполнитьбланк;
  var q: Query;
  var iter, isub: integer;
  var aFiler: string[];
  var ares: variant[2];
  var locDate: Date;
  var locNum, locT, locExtId: string;
  var locRekv: Базовый.Данные.Субъект;
  aFiler[1] = "Проводить";
  --aFiler[2] = "ПозицииДеб.Проводить";
  aFiler[3] = "ДатаПроведения>01.01.1900";
--  --aFiler[4] = "ПозицииДеб.Дата>=" + str(Период.ДатаНачала);
--  --aFiler[5] = "ПозицииДеб.Дата<=" + str(Период.ДатаОкончания);
  aFiler[4] = "ДатаПроведения>=" + str(Период.ДатаНачала);
  aFiler[5] = "ДатаПроведения<=" + str(Период.ДатаОкончания);
  aFiler[6] = "Рекв=" + str(Рекв);
  q = Query.Create([Бухучет.Банки.Выписки]);
  try
    q.LoadingFieldsMode = mdAll + mdStructArrays;
    q.LoadingFields = "ExtId;Проводить;ДатаПроведения;Рекв;ПозицииДеб;ПозицииДеб.Проводить;ПозицииДеб.ДатаДокумента;ПозицииДеб.НомерБум;ПозицииДеб.РеквП;ПозицииДеб.Т;ПозицииДеб.ВидЭд.ОКВЭД;ПозицииДеб.ВидЭд.Сумма";
    q.Filter = СложитьстрокиФильтраПоИ(aFiler);
    if q.Count > 0:
--      ares = q.CalcAggregates("GroupBy(ExtId)," +
--                              "GroupBy(ПозицииДеб.ДатаДокумента)," +
--                              "GroupBy(ПозицииДеб.НомерБум)," +
--                              "GroupBy(ПозицииДеб.РеквП)," +
--                              "GroupBy(ПозицииДеб.Т)," +
--                              "GroupBy(ПозицииДеб.ВидЭд.ОКВЭД),Sum(ПозицииДеб.ВидЭд.Сумма)") as variant[2];
      q.Select;
      ares = q.CalcAggregates("GroupBy(ПозицииДеб.НомерБум)")   as variant[2];
    else
      message('Нет данных для занесения в регистр!');
    fi;
  finally
    q = nil;
  end;
  if vartype(ares) = varArray and LengthOfArray(ares)>0:
    if not RecordEdited(Self.Record):
      ValidRecordEdit(Self.Record);
    fi;
    if RecordEdited(Self.Record):
      if Позиции.Count > 0:
        Позиции.Clear;
      fi;
      for iter = 1 .. LengthOfArray(ares[1]) do
--          locExtId = ares[1, iter];
--          locDate = ares[2, iter];
--          locNum = ares[3, iter];
--          locRekv = ares[4, iter];
--          locT = ares[5, iter];
        if locDate <> ares[1, iter] or locNum <> ares[2, iter] or
           locRekv <> ares[3, iter] or locT <> ares[4, iter]:
          locExtId = ares[1, iter];
          locDate = ares[2, iter];
          locNum = ares[3, iter];
          locRekv = ares[4, iter];
          locT = ares[5, iter];
          isub = Позиции.Count+1;
          Позиции.Insert(isub);
          Позиции[isub].БанковскаяВыписка =QueryRecord(Бухучет.Банки.Выписки, "ExtId='" + locExtId +"'");
          Позиции[isub].Контрагент        =locRekv;
          Позиции[isub].РеквП             =locRekv;
          --Позиции[isub].ПрихПлатПоручение = nil;
          --Позиции[isub].ПервДок           = nil;
          --Позиции[isub].КорСчет           = nil;
          --Позиции[isub].Банк              = nil;
          --Позиции[isub].КодОп             = "";
          --Позиции[isub].НомВыпД           = "";
          Позиции[isub].ДатаДокумента     = locDate;
          Позиции[isub].НомерБум          = locNum;
          Позиции[isub].Т                 = locT;
        fi;
        with Позиции[isub].ВидЭД do
          with Insert(Count + 1) do
            ОКВЭД = ares[6, iter]; -- Позиции[isub].ВидЭД[].ОКВЭД
            Сумма = ares[7, iter]; -- Позиции[isub].ВидЭД[].Сумма
          od;
        od;
      od;
    else
      seterror(-1,"Не внести изменения в документ!", "Ошибка:", itError);
    fi;
  fi;
end;

--}

--{ Обработчики событий бланка

--}

--{ Обработчики событий объектов бланка

proc кнРасчет(Sender :Button);
  if ПараметрыКорректны:
    Заполнитьбланк;
  fi;
end;

--}

--{ Обработчики событий полей бланка

func Поле_ПриВыводе(Cell :TemplateCell; Value :Variant;
  Action :Template.OutputTypes; var Format :String) :Variant;
  -- Обработка вывода значения поля в зависимости от типа события
  -- Параметры:
  --   Cell: клетка шаблона
  --   Value: значение в поле клетки
  --   Action: тип вывода (Вывод,Вычисление,Копирование,Экспорт)
  --   Format: строка-формат вывода значения
  Result = Value; -- Что получили, то и выводим
end;

func ПолеПериодРасчета_ПриВыводе(Cell :TemplateCell; Value :Variant;
  Action :Template.OutputTypes; var Format :String) :Variant;
  if Cell.Contents = "Период.ДатаНачала":
    Cell.UseMacro = true;
    result = "c " + ДатаВСтрокуСМакро(Период.ДатаНачала);
  elsif Cell.Contents = "Период.ДатаОкончания":
    Cell.UseMacro = true;
    result = "по " + ДатаВСтрокуСМакро(Период.ДатаОкончания);
  else
    result = inherited ПолеПериодРасчета_ПриВыводе(Cell, Value, Action, Format);
  fi;
end;

func ПолеДата_ПриВыводе(Cell :TemplateCell; Value :Variant;
  Action :Template.OutputTypes; var Format :String) :Variant;
  Cell.UseMacro = true;
  result = ДатаВСтрокуСМакро(Value);
end;
--}

end